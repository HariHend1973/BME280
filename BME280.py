#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Oct 30, 2023 05:56:48 PM +07  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import os.path

_script = sys.argv[0]
_location = os.path.dirname(_script)

import BME280_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    style.configure('Vertical.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    style.configure('Horizontal.TScrollbar',  background=_bgcolor,
        arrowcolor= _fgcolor)
    _style_code_ran = 1

class APRS_Telemetry:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        top.geometry("600x464+340+191")
        top.minsize(120, 1)
        top.maxsize(1284, 1005)
        top.resizable(1,  1)
        top.title("APRS Telemetry")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.top = top

        self.Frame1 = tk.Frame(self.top)
        self.Frame1.place(relx=0.017, rely=0.022, relheight=0.19, relwidth=0.358)

        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(highlightbackground="#d9d9d9")
        self.Frame1.configure(highlightcolor="black")
        self.txtKissIp = tk.Entry(self.Frame1)
        self.txtKissIp.place(relx=0.419, rely=0.125, height=20, relwidth=0.53)
        self.txtKissIp.configure(background="white")
        self.txtKissIp.configure(disabledforeground="#a3a3a3")
        self.txtKissIp.configure(font="TkFixedFont")
        self.txtKissIp.configure(foreground="#000000")
        self.txtKissIp.configure(highlightbackground="#d9d9d9")
        self.txtKissIp.configure(highlightcolor="black")
        self.txtKissIp.configure(insertbackground="black")
        self.txtKissIp.configure(relief="solid")
        self.txtKissIp.configure(selectbackground="#c4c4c4")
        self.txtKissIp.configure(selectforeground="black")
        self.txtKissPort = tk.Entry(self.Frame1)
        self.txtKissPort.place(relx=0.419, rely=0.352, height=20, relwidth=0.53)
        self.txtKissPort.configure(background="white")
        self.txtKissPort.configure(disabledforeground="#a3a3a3")
        self.txtKissPort.configure(font="TkFixedFont")
        self.txtKissPort.configure(foreground="#000000")
        self.txtKissPort.configure(highlightbackground="#d9d9d9")
        self.txtKissPort.configure(highlightcolor="black")
        self.txtKissPort.configure(insertbackground="black")
        self.txtKissPort.configure(relief="solid")
        self.txtKissPort.configure(selectbackground="#c4c4c4")
        self.txtKissPort.configure(selectforeground="black")
        self.btnConnect = tk.Button(self.Frame1)
        self.btnConnect.place(relx=0.419, rely=0.636, height=24, width=80)
        self.btnConnect.configure(activebackground="beige")
        self.btnConnect.configure(activeforeground="black")
        self.btnConnect.configure(background="#d9d9d9")
        self.btnConnect.configure(compound='left')
        self.btnConnect.configure(disabledforeground="#a3a3a3")
        self.btnConnect.configure(foreground="#000000")
        self.btnConnect.configure(highlightbackground="#d9d9d9")
        self.btnConnect.configure(highlightcolor="black")
        self.btnConnect.configure(pady="0")
        self.btnConnect.configure(text='''Connect''')
        self.btnConnect.bind('<Button-1>',lambda e:BME280_support.connect(e))
        self.lblKissIp = tk.Label(self.Frame1)
        self.lblKissIp.place(relx=0.116, rely=0.136, height=16, width=54)
        self.lblKissIp.configure(activebackground="#f9f9f9")
        self.lblKissIp.configure(anchor='w')
        self.lblKissIp.configure(background="#d9d9d9")
        self.lblKissIp.configure(compound='left')
        self.lblKissIp.configure(disabledforeground="#a3a3a3")
        self.lblKissIp.configure(foreground="#000000")
        self.lblKissIp.configure(highlightbackground="#d9d9d9")
        self.lblKissIp.configure(highlightcolor="black")
        self.lblKissIp.configure(text='''KISS IP''')
        self.lblKissPort = tk.Label(self.Frame1)
        self.lblKissPort.place(relx=0.047, rely=0.341, height=15, width=74)
        self.lblKissPort.configure(activebackground="#f9f9f9")
        self.lblKissPort.configure(anchor='w')
        self.lblKissPort.configure(background="#d9d9d9")
        self.lblKissPort.configure(compound='left')
        self.lblKissPort.configure(disabledforeground="#a3a3a3")
        self.lblKissPort.configure(foreground="#000000")
        self.lblKissPort.configure(highlightbackground="#d9d9d9")
        self.lblKissPort.configure(highlightcolor="black")
        self.lblKissPort.configure(text='''KISS PORT''')
        self.Frame2 = tk.Frame(self.top)
        self.Frame2.place(relx=0.383, rely=0.022, relheight=0.19, relwidth=0.592)

        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(highlightbackground="#d9d9d9")
        self.Frame2.configure(highlightcolor="black")
        self.txtTemperature = tk.Entry(self.Frame2)
        self.txtTemperature.place(relx=0.279, rely=0.261, height=20
                , relwidth=0.237)
        self.txtTemperature.configure(background="white")
        self.txtTemperature.configure(disabledforeground="#a3a3a3")
        self.txtTemperature.configure(font="TkFixedFont")
        self.txtTemperature.configure(foreground="#000000")
        self.txtTemperature.configure(highlightbackground="#d9d9d9")
        self.txtTemperature.configure(highlightcolor="black")
        self.txtTemperature.configure(insertbackground="black")
        self.txtTemperature.configure(relief="solid")
        self.txtTemperature.configure(selectbackground="#c4c4c4")
        self.txtTemperature.configure(selectforeground="black")
        self.txtHumidity = tk.Entry(self.Frame2)
        self.txtHumidity.place(relx=0.282, rely=0.591, height=20, relwidth=0.237)

        self.txtHumidity.configure(background="white")
        self.txtHumidity.configure(disabledforeground="#a3a3a3")
        self.txtHumidity.configure(font="TkFixedFont")
        self.txtHumidity.configure(foreground="#000000")
        self.txtHumidity.configure(highlightbackground="#d9d9d9")
        self.txtHumidity.configure(highlightcolor="black")
        self.txtHumidity.configure(insertbackground="black")
        self.txtHumidity.configure(relief="solid")
        self.txtHumidity.configure(selectbackground="#c4c4c4")
        self.txtHumidity.configure(selectforeground="black")
        self.lblTemperature = tk.Label(self.Frame2)
        self.lblTemperature.place(relx=0.014, rely=0.216, height=21, width=84)
        self.lblTemperature.configure(activebackground="#f9f9f9")
        self.lblTemperature.configure(anchor='w')
        self.lblTemperature.configure(background="#d9d9d9")
        self.lblTemperature.configure(compound='left')
        self.lblTemperature.configure(disabledforeground="#a3a3a3")
        self.lblTemperature.configure(foreground="#000000")
        self.lblTemperature.configure(highlightbackground="#d9d9d9")
        self.lblTemperature.configure(highlightcolor="black")
        self.lblTemperature.configure(text='''Temperature''')
        self.lblHumidity = tk.Label(self.Frame2)
        self.lblHumidity.place(relx=0.065, rely=0.568, height=21, width=64)
        self.lblHumidity.configure(activebackground="#f9f9f9")
        self.lblHumidity.configure(anchor='w')
        self.lblHumidity.configure(background="#d9d9d9")
        self.lblHumidity.configure(compound='left')
        self.lblHumidity.configure(disabledforeground="#a3a3a3")
        self.lblHumidity.configure(foreground="#000000")
        self.lblHumidity.configure(highlightbackground="#d9d9d9")
        self.lblHumidity.configure(highlightcolor="black")
        self.lblHumidity.configure(text='''Humidity''')
        self.lblAltitude = tk.Label(self.Frame2)
        self.lblAltitude.place(relx=0.541, rely=0.227, height=22, width=54)
        self.lblAltitude.configure(activebackground="#f9f9f9")
        self.lblAltitude.configure(anchor='w')
        self.lblAltitude.configure(background="#d9d9d9")
        self.lblAltitude.configure(compound='left')
        self.lblAltitude.configure(disabledforeground="#a3a3a3")
        self.lblAltitude.configure(foreground="#000000")
        self.lblAltitude.configure(highlightbackground="#d9d9d9")
        self.lblAltitude.configure(highlightcolor="black")
        self.lblAltitude.configure(text='''Altitude''')
        self.txtAltitude = tk.Entry(self.Frame2)
        self.txtAltitude.place(relx=0.732, rely=0.227, height=20, relwidth=0.237)

        self.txtAltitude.configure(background="white")
        self.txtAltitude.configure(disabledforeground="#a3a3a3")
        self.txtAltitude.configure(font="TkFixedFont")
        self.txtAltitude.configure(foreground="#000000")
        self.txtAltitude.configure(highlightbackground="#d9d9d9")
        self.txtAltitude.configure(highlightcolor="black")
        self.txtAltitude.configure(insertbackground="black")
        self.txtAltitude.configure(relief="solid")
        self.txtAltitude.configure(selectbackground="#c4c4c4")
        self.txtAltitude.configure(selectforeground="black")
        self.lblPressure = tk.Label(self.Frame2)
        self.lblPressure.place(relx=0.535, rely=0.568, height=21, width=58)
        self.lblPressure.configure(activebackground="#f9f9f9")
        self.lblPressure.configure(anchor='w')
        self.lblPressure.configure(background="#d9d9d9")
        self.lblPressure.configure(compound='left')
        self.lblPressure.configure(disabledforeground="#a3a3a3")
        self.lblPressure.configure(foreground="#000000")
        self.lblPressure.configure(highlightbackground="#d9d9d9")
        self.lblPressure.configure(highlightcolor="black")
        self.lblPressure.configure(text='''Pressure''')
        self.txtPressure = tk.Entry(self.Frame2)
        self.txtPressure.place(relx=0.732, rely=0.568, height=20, relwidth=0.245)

        self.txtPressure.configure(background="white")
        self.txtPressure.configure(disabledforeground="#a3a3a3")
        self.txtPressure.configure(font="TkFixedFont")
        self.txtPressure.configure(foreground="#000000")
        self.txtPressure.configure(highlightbackground="#d9d9d9")
        self.txtPressure.configure(highlightcolor="black")
        self.txtPressure.configure(insertbackground="black")
        self.txtPressure.configure(relief="solid")
        self.txtPressure.configure(selectbackground="#c4c4c4")
        self.txtPressure.configure(selectforeground="black")
        self.lblLogs = tk.Label(self.top)
        self.lblLogs.place(relx=0.017, rely=0.222, height=22, width=34)
        self.lblLogs.configure(activebackground="#f9f9f9")
        self.lblLogs.configure(anchor='w')
        self.lblLogs.configure(background="#d9d9d9")
        self.lblLogs.configure(compound='left')
        self.lblLogs.configure(disabledforeground="#a3a3a3")
        self.lblLogs.configure(foreground="#000000")
        self.lblLogs.configure(highlightbackground="#d9d9d9")
        self.lblLogs.configure(highlightcolor="black")
        self.lblLogs.configure(text='''Logs''')
        _style_code()
        self.scrlLogs = ScrolledListBox(self.top)
        self.scrlLogs.place(relx=0.013, rely=0.276, relheight=0.7
                , relwidth=0.968)
        self.scrlLogs.configure(background="white")
        self.scrlLogs.configure(cursor="xterm")
        self.scrlLogs.configure(disabledforeground="#a3a3a3")
        self.scrlLogs.configure(font="TkFixedFont")
        self.scrlLogs.configure(foreground="black")
        self.scrlLogs.configure(highlightbackground="#d9d9d9")
        self.scrlLogs.configure(highlightcolor="#d9d9d9")
        self.scrlLogs.configure(selectbackground="#c4c4c4")
        self.scrlLogs.configure(selectforeground="black")

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''
    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))
        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')
        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)
        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
                  | tk.Place.__dict__.keys()
        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    '''A standard Tkinter Listbox widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)
    def size_(self):
        sz = tk.Listbox.size(self)
        return sz

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')
def start_up():
    BME280_support.main()

if __name__ == '__main__':
    BME280_support.main()




